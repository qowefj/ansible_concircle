---
- name: Force Start Windows 10 Updates
  hosts: windows
  gather_facts: no
  become: yes

  tasks:
    - name: Ensure the Windows Update service is running
      win_service:
        name: wuauserv
        start_mode: auto
        state: started

    - name: Grant 'Log on as a batch job' rights to Ansible user
      win_shell: |
        powershell.exe -Command "
          $Account = New-Object System.Security.Principal.NTAccount('Ansible');
          $SID = $Account.Translate([System.Security.Principal.SecurityIdentifier]).Value;
          secedit /export /cfg C:\secedit-config.txt;
          $lines = Get-Content C:\secedit-config.txt;
          if ($lines -notcontains 'SeBatchLogonRight = *$SID*') {
            $lines += 'SeBatchLogonRight = *$SID*';
            $lines | Out-File C:\secedit-config.txt;
            secedit /import /cfg C:\secedit-config.txt;
            secedit /configure /db secedit.sdb /cfg C:\secedit-config.txt /areas USER_RIGHTS;
          }
          Remove-Item C:\secedit-config.txt;
        "
      args:
        executable: cmd
      register: batch_job_rights

    - name: Verify 'Log on as a batch job' rights
      win_shell: |
        powershell.exe -Command "
          $Account = New-Object System.Security.Principal.NTAccount('Ansible');
          $SID = $Account.Translate([System.Security.Principal.SecurityIdentifier]).Value;
          $rights = secedit /export /cfg C:\secedit-verify.txt;
          $lines = Get-Content C:\secedit-verify.txt;
          Remove-Item C:\secedit-verify.txt;
          if ($lines -contains 'SeBatchLogonRight = *$SID*') { exit 0 } else { exit 1 };
        "
      args:
        executable: cmd
      register: verify_batch_job_rights
      failed_when: verify_batch_job_rights.rc != 0

    - name: Check if 'Ansible' user is an administrator
      win_shell: |
        powershell.exe -Command "([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)"
      register: is_admin
      failed_when: not is_admin.stdout | bool

    - name: Install NuGet provider
      win_command: powershell.exe -Command "Install-PackageProvider -Name NuGet -Force -Confirm:$false"
      args:
        creates: "C:\\Program Files\\PackageManagement\\ProviderAssemblies\\nuget"
      register: nuget_install

    - name: Install PSWindowsUpdate module
      win_command: powershell.exe -Command "Install-Module -Name PSWindowsUpdate -Force -Confirm:$false"
      args:
        creates: "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWindowsUpdate"
      when: nuget_install is succeeded

    - name: Import PSWindowsUpdate module
      win_command: powershell.exe -Command "Import-Module PSWindowsUpdate"
      register: pswindowsupdate_import

    - name: Force Windows Update to check for updates
      win_command: powershell.exe -Command "(New-Object -ComObject Microsoft.Update.AutoUpdate).DetectNow()"
      when: pswindowsupdate_import is succeeded

    - name: Download and install updates
      win_command: powershell.exe -Command "Get-WindowsUpdate -AcceptAll -Install -AutoReboot"
      when: pswindowsupdate_import is succeeded

    - name: Reboot if updates are installed and pending a restart
      win_reboot:
        msg: "Rebooting after Windows updates"
        pre_reboot_delay: 60
        post_reboot_delay: 120
        reboot_timeout: 3600
        connect_timeout: 600
        test_command: 'powershell.exe -Command "(Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain"'
